# -*- coding: utf-8 -*-
"""DGL-LSNP-Proyecto-EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/138NBMjfDqVN4gIibfHhb6sKeCZ2oYdmD
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd                     # Para la manipulación y análisis de datos
import numpy as np                      # Para crear vectores y matrices n dimensionales
import matplotlib.pyplot as plt         # Para la generación de gráficas a partir de los datos
import seaborn as sns                   # Para la visualización de datos basado en matplotlib
# %matplotlib inline                      
# Para generar imágenes dentro del cuaderno

# Solicitar al usuario que ingrese el nombre del archivo
nombre_archivo = input("Ingrese el nombre del archivo CSV: ")
nombre_archivo = nombre_archivo + ".csv"
# Intentar leer el archivo CSV
try:
    # Leer el archivo CSV utilizando pandas
    Datos = pd.read_csv(nombre_archivo)
    print(Datos)
    
except FileNotFoundError:
    print("El archivo no existe o no se puede abrir.")
except:
    print("Ocurrió un error al leer el archivo.")

"""Paso 1: Descripción de la estructura de los datos"""

# Obtener las dimensiones del DataFrame
filas, columnas = Datos.shape

# Imprimir las dimensiones por separado
print("Los datos proporcionados tienen las siguientes dimensiones")
print("Número de filas:", filas)
print("Número de columnas:", columnas)

print("Los tipos de datos de las variables son:")
print(Datos.dtypes)

"""Paso 2: Identificación de datos faltantes"""

# Identificar las variables con valores nulos
variables_con_nulos = Datos.columns[Datos.isnull().any()]

# Imprimir las variables con valores nulos
if len(variables_con_nulos) > 0:
  print("Variables con valores nulos:")
  for variable in variables_con_nulos:
        cantidad_nulos = Datos[variable].isnull().sum()
        print(f"{variable}: {cantidad_nulos} valores nulos")
else: 
  print("No existen variables con valores nulos")

"""Paso 3: Detección de valores atípicos

1) Distribución de variables numéricas
"""

Datos.hist(figsize=(15,15), xrot=45)
plt.show()

"""2) Resumen estadístico de variables numéricas"""

# Obtener las variables disponibles
variables_disponibles = Datos.columns

# Mostrar las variables disponibles para analizar
print("Variables disponibles:")
for variable in variables_disponibles:
    print(f"- {variable}")

# Solicitar al usuario que ingrese el nombre de la variable a analizar
variable_elegida = input("Ingrese el nombre de la variable que desea analizar: ")

# Verificar si la variable ingresada existe en los datos
if variable_elegida in Datos.columns:
    # Obtener la descripción estadística de la variable seleccionada
    descripcion_variable = Datos[variable_elegida].describe()
    
    # Imprimir la descripción estadística
    print("Descripción estadística de la variable", variable_elegida, ":")
    print(descripcion_variable)
else:
    print("La variable", variable_elegida, "no existe en los datos.")

"""3) Diagramas para detectar posibles valores atípicos"""

# Obtener solo las columnas numéricas
columnas_numericas = Datos.select_dtypes(include=[float, int])

# Mostrar el catálogo de variables numéricas disponibles
print("Variables numéricas disponibles:")
for i, columna in enumerate(columnas_numericas.columns):
    print(f"{i+1}. {columna}")

# Solicitar al usuario que ingrese el número de la variable a analizar
num_variable = int(input("Ingresa el número de la variable a analizar: "))
variable = columnas_numericas.columns[num_variable - 1]

# Generar el diagrama de caja para la variable seleccionada
plt.boxplot(Datos[variable])

# Configurar el título y etiquetas de los ejes
plt.title(f"Diagrama de caja de {variable}")
plt.ylabel("Valor")

# Mostrar el diagrama de caja
plt.show()

"""4) Distribución de variables categóricas"""



"""Paso 4: Identificación de relaciones entre pares variables"""

